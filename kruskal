#include
#include
using namespace std;
int e,v;
struct Edge
{
int src,des,wt;
};
void sort1(struct Edge edge[])
{

int i, j,k;
for (i = 0; i < e-1; i++)
{

// Last i elements are already in place
for (j = 0; j edge[j+1].wt)
{
k=edge[j].wt;
edge[j].wt=edge[j+1].wt;
edge[j+1].wt=k;
k=edge[j].src;
edge[j].src=edge[j+1].src;
edge[j+1].src=k;
k=edge[j].des;
edge[j].des=edge[j+1].des;
edge[j+1].des=k;
}}
}
}
int find(int x,int parent[])
{
if(parent[x]==-1)
return x;
find(parent[x],parent);
}
void union1(int x,int y,int parent[])
{int x1,y1;

parent[x]=y;
}
int iscycle(int i ,int parent[],struct Edge edge[])
{int x,y;

x=find(edge[i].src,parent);
y=find(edge[i].des,parent);
if(x!=y)
{
union1(x,y,parent);
return 0;
}
return 1;

}

int main()
{
int i,j,k,n=0,path[745][452],sum=0;

cout<<"enter the total no of edges and vertices"<>e>>v;
int parent[v];
for(i=0;i<v;i++)
{
parent[i]=-1;
}
cout<<"enter the source, destination and weight of node "<<endl;
struct Edge edge[e];
for(i=0;i>edge[i].src>>edge[i].des>>edge[i].wt;

}
sort1(edge);

k=0;
for(i=0;i<e;i++)
{
if(!iscycle(i,parent,edge))
{
path[k][0]=edge[i].src;
path[k++][1]=edge[i].des;
n++;
sum=sum+edge[i].wt;
}
if(n==v-1)
break;
}
for(i=0;i<v-1;i++)
{
printf("%d %d",path[i][0],path[i][1]);
cout<<endl;
}
cout<<endl<<sum;

}

Reply

PUJIT DUAOCTOBER 3, 2017 AT 10:15 AM
Great Explanation. Really easy to understand. Thanks

Reply

SIDRADECEMBER 2, 2017 AT 6:20 PM
please can you convert this coding in java ?

Reply

BETUL CIFTCIAPRIL 28, 2018 AT 8:12 PM
Your implementations are always great and easy to understand, thank you so much!

Reply

ANONYMOUSAPRIL 22, 2019 AT 2:17 AM
the most complex code that i have seen in your blog made it so complex using typedef and many unnecessary snippets could have made it little simpler to understand.

Reply

VATSALJULY 18, 2019 AT 9:21 AM
There are total 5 nodes then matrix should be 5*5 not 6*6

Reply

BETTYNOVEMBER 13, 2019 AT 5:15 PM
I don’t understand the matrix the program gives as an answer. The last column is the cost but what are the first two columns?

Reply

SESHU_ZOOMINMAY 15, 2020 AT 7:20 AM
Your code could be little modified as :

#include
#define MAX 30
typedef struct edge
{
int u,v,w;
}edge;
edge edgelist[MAX];
int G[MAX][MAX],n,e=0,s=0;
edge spanlist[MAX];
void kruskal();
int find(int belongs[],int vertexno);
void union1(int belongs[],int c1,int c2);
void sort();
void print();
int main()
{
int i,j;
printf(“\nEnter number of vertices:”);
scanf(“%d”,&n);
printf(“\nEnter the adjacency matrix:\n”);
for(i=0;i<n;i++)
for(j=0;j<n;j++)
scanf("%d",&G[i][j]);
kruskal();
print();
return 0;
}
void kruskal()
{
int belongs[MAX],i,j,cno1,cno2;
for(i=1;i<n;i++)
for(j=0;j<i;j++)
{
if(G[i][j]!=0)
{
edgelist[e].u=i;
edgelist[e].v=j;
edgelist[e].w=G[i][j];
e++;
}
}
sort();
for(i=0;i<n;i++)
belongs[i]=i;
for(i=0;i<e;i++)
{
cno1=find(belongs,edgelist[i].u);
cno2=find(belongs,edgelist[i].v);
if(cno1!=cno2)
{
spanlist[s]=edgelist[i];
s++;
union1(belongs,cno1,cno2);
}
}
}

int find(int belongs[],int vertexno)
{
return(belongs[vertexno]);
}

void union1(int belongs[],int c1,int c2)
{
int i;

for(i=0;i<n;i++)
if(belongs[i]==c2)
belongs[i]=c1;
}

void sort()
{
int i,j;
edge temp;
for(i=1;i<e;i++)
for(j=0;jedgelist[j+1].w)
{
temp=edgelist[j];
edgelist[j]=edgelist[j+1];
edgelist[j+1]=temp;
}
}
void print()
{
int i,cost=0;
for(i=0;i<s;i++)
{
printf("\n%d\t%d\t%d",spanlist[i].u,spanlist[i].v,spanlist[i].w);
cost=cost+spanlist[i].w;
}
printf("\n\nCost of the spanning tree=%d",cost);
}
